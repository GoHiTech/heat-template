heat_template_version: 2018-08-31

description: server base template

parameters:
  availability_zone: {type: string, default: nova}
  designate_enabled: {type: boolean, default: true}
  flavor: {type: string}
  network_public: {type: string, default: ""}
  image: {type: string}
  key_name: {type: string}
  metadata: {type: json, default: {}}
  name: {type: string}
  network: {type: string}
  networks: {type: json, default: []}
  security_groups: {type: json, default: ["default"]}
  ssh_authorized_keys: {type: json, default: []}
  timezone: {type: string, default: Australia/Perth}
  volume_size: {type: number, default: 0}
  volume_type: {type: string, default: standard}
  volume_size_microk8s: {type: number, default: 0}
  volume_size_lxd: {type: number, default: 0}
  dns_domain: {type: string, default: None}
  allowed_address_pairs: {type: json, default: []}

conditions:
  attachFloatingIP: {not: {equals: [{get_param: network_public}, ""]}}
  attachVolume: {not: {equals: [{get_param: volume_size}, 0]}}
  createDnsRR:
    and:
      - {not: {equals: [{get_param: dns_domain}, None]}}
      - attachFloatingIP
      - {get_param: designate_enabled}
  microk8s: {not: {equals: [{get_param: volume_size_microk8s}, 0]}}
  lxd: {not: {equals: [{get_param: volume_size_lxd}, 0]}}

resources:
  port:
    type: OS::Neutron::Port
    properties:
      name: {get_param: name}
      network: {get_param: network}
      security_groups: {get_param: security_groups}
      allowed_address_pairs: {get_param: allowed_address_pairs}

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: network_public}
      #dns_domain: gohitech.net.
      #dns_name: {get_param: name}
      port_id: {get_resource: port}
    condition: attachFloatingIP

  dns_rr:
    type: OS::Designate::RecordSet
    properties:
      records:
        - {get_attr: [floating_ip,floating_ip_address]}
      type: A
      zone: {str_replace: {template: "${ZONE}.", params: {"${ZONE}": {get_param: dns_domain}}}}
      name: {str_replace: {template: "${NAME}.", params: {"${NAME}": {get_param: name}}}}
    condition: createDnsRR

  volume:
    type: volume.tpl.hot.yaml
    condition: attachVolume
    properties:
      availability_zone: {get_param: availability_zone}
      metadata: {get_param: metadata}
      name: {get_param: name}
      size: {get_param: volume_size}
      volume_type: {get_param: volume_type}
      instance_uuid: {get_resource: server}

  volumeMicrok8s:
    type: OS::Cinder::Volume
    condition: microk8s
    properties:
      availability_zone: {get_param: availability_zone}
      description: "MicroK8s dedicated volume"
      metadata: {get_param: metadata}
      name: {list_join: ["-",[{get_param: name},"microk8s"]]}
      size: {get_param: volume_size_microk8s}
      volume_type: {get_param: volume_type}

  volumeMicrok8sAttachment:
    type: OS::Cinder::VolumeAttachment
    condition: microk8s
    properties:
      instance_uuid: {get_resource: server}
      volume_id: {get_resource: volumeMicrok8s}

  volumeLXD:
    type: OS::Custom::VolumeAttach
    condition: lxd
    properties:
      availability_zone: {get_param: availability_zone}
      description: "LXD/LXC dedicated volume for storage pool"
      metadata: {get_param: metadata}
      name: {list_join: ["-",[{get_param: name},"lxd"]]}
      size: {get_param: volume_size_lxd}
      volume_type: {get_param: volume_type}
      instance_uuid: {get_resource: server}

  server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      availability_zone: {get_param: availability_zone}
      image: {get_param: image}
      key_name: {get_param: key_name}
      metadata:
        map_merge:
          - {get_param: metadata}
          - if: [microk8s, {volume_id_microk8s: {get_resource: volumeMicrok8s}}, {}]
          - if: [lxd, {volume_id_lxd: {get_resource: volumeLXD}}, {}]
      name: {get_param: name}
      networks:
        list_concat:
          - [{port: {get_resource: port}}]
          - {get_param: networks}
      user_data:
        str_replace:
          params:
            ${HOSTNAME}: {get_param: name}
            ${TIMEZONE}: {get_param: timezone}
            ${SSH_KEYS}: {get_param: ssh_authorized_keys}
          template: |
            #cloud-config
            bootcmd:
            - echo 'APT::Periodic::Update-Package-Lists "0";' >/etc/apt/apt.conf.d/90auto-upgrades-override
            - echo 'APT::Periodic::Download-Upgradeable-Packages "0";' >>/etc/apt/apt.conf.d/90auto-upgrades-override
            - echo 'APT::Periodic::AutocleanInterval "0";' >>/etc/apt/apt.conf.d/90auto-upgrades-override
            - echo 'APT::Periodic::Unattended-Upgrade "0";' >>/etc/apt/apt.conf.d/90auto-upgrades-override
            fqdn: ${HOSTNAME}
            locale: en_AU.utf8
            timezone: ${TIMEZONE}
            packages:
            - python3
            - python3-pip
            package_reboot_if_required: true
            package_update: true
            package_upgrade: true
            ssh_authorized_keys: ${SSH_KEYS}
            write_files:
            - content: |
                manage_etc_hosts: false
              defer: true
              path: /etc/cloud/cloud.cfg.d/90_user-data-overrides.cfg
      user_data_format: RAW
      user_data_update_policy: IGNORE
